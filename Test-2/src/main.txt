#[derive(Debug)]
struct Command {
    index: usize,
    start: u32,
    end: u32,
}

fn parse_command_line(line: &str, index: usize) -> Command {
    let parts: Vec<u32> = line
        .split_whitespace()
        .map(|p| p.parse().unwrap())
        .collect();
    let start = parts[0];
    let duration = parts[1];
    Command {
        index,
        start,
        end: start + duration,
    }
}

fn schedule_commands(mut commands: Vec<Command>) -> Vec<usize> {
    commands.sort_by(|a, b| a.start.cmp(&b.start));
    let mut current_end = 0;
    let mut executed = Vec::new();

    for cmd in commands {
        if cmd.start >= current_end {
            executed.push(cmd.index);
            current_end = cmd.end;
        }
    }

    executed
}

fn main() {
    // Input: hardcoded for now â€” later replace with stdin if needed
    let raw_commands = vec![
        "0 5",
        "4 4",
        "10 3",
    ];

    let commands: Vec<Command> = raw_commands
        .iter()
        .enumerate()
        .map(|(i, line)| parse_command_line(line, i + 1))
        .collect();

    let executed = schedule_commands(commands);

    // Output format
    print!("Executed Commands:");
    for (i, idx) in executed.iter().enumerate() {
        if i > 0 {
            print!(",");
        }
        print!(" {}", idx);
    }
    println!();
}